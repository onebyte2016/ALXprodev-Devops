#!/bin/bash

# Output directory
OUTPUT_DIR="pokemon_data"
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
ERROR_LOG="errors.log"

# Ensure output directory exists
mkdir -p "$OUTPUT_DIR"
: > "$ERROR_LOG"  # Clear error log

# Function to fetch a Pok√©mon's data
fetch_pokemon() {
    local name="$1"
    local url="https://pokeapi.co/api/v2/pokemon/$name"
    local output_file="$OUTPUT_DIR/${name}.json"

    # Make API call and check status
    status_code=$(curl -s -w "%{http_code}" -o "${output_file}.tmp" "$url")

    if [ "$status_code" -eq 200 ]; then
        mv "${output_file}.tmp" "$output_file"
        echo "‚úÖ $name fetched and saved to $output_file"
    else
        echo "‚ùå Failed to fetch $name (HTTP $status_code)"
        echo "$name - HTTP $status_code" >> "$ERROR_LOG"
        rm -f "${output_file}.tmp"
    fi
}

echo "üîÅ Fetching Pok√©mon in parallel..."

# Loop through Pok√©mon and run each fetch in background
for pokemon in "${POKEMON_LIST[@]}"; do
    fetch_pokemon "$pokemon" &
done

# Wait for all background jobs to finish
wait

echo ""
echo "‚úÖ All parallel fetches completed."

# Check if any errors occurred
if [ -s "$ERROR_LOG" ]; then
    echo "‚ö†Ô∏è  Some requests failed. Check $ERROR_LOG for details."
else
    echo "üéâ All Pok√©mon fetched successfully with no errors!"
fi
